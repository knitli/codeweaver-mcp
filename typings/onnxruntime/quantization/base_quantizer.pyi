"""
This type stub file was generated by pyright.
"""

import onnx
from typing import Any

class QuantizationParams:
    def __init__(self, **data: dict[str, Any]) -> None:
        ...
    
    def get(self, key, default_value=...): # -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    


class BaseQuantizer:
    def __init__(self, model, per_channel, reduce_range, weight_qType, activation_qType, tensors_range, nodes_to_quantize, nodes_to_exclude, op_types_to_quantize, extra_options=...) -> None:
        ...
    
    def is_weight_symmetric(self, weight_quant_type: onnx.TensorProto.DataType) -> bool:
        ...
    
    def quantize_model(self):
        ...
    
    def is_input_a_initializer(self, input_name): # -> bool:
        ...
    
    def is_per_channel(self): # -> Any:
        ...
    
    def is_valid_quantize_weight(self, weight_name): # -> bool:
        ...
    
    def should_quantize_node(self, node): # -> bool:
        ...
    
    def check_opset_version(self): # -> Literal[10, 19, 11]:
        ...
    
    def quantize_bias_static_impl(self, bias_name, input_scale, weight_scale, beta=...): # -> tuple[Any, Any, Any, ndarray[tuple[int], dtype[floating[_32Bit]]] | ndarray[tuple[int], dtype[Any]], Literal['Cast', 'DequantizeLinear'], Any | None]:
        """
        Quantized the bias. Zero Point == 0 and Scale == Input_Scale * Weight_Scale
        """
        ...
    
    def quantize_initializer_impl(self, weight, qType, reduce_range=..., keep_float_weight=...): # -> tuple[Any, Any, Any]:
        """
        :param weight: TensorProto initializer
        :param qType: type to quantize to
        :param keep_float_weight: Whether to quantize the weight. In some cases, we only want to qunatize scale and zero point.
                                  If keep_float_weight is False, quantize the weight, or don't quantize the weight.
        :return: quantized weight name, zero point name, scale name
        """
        ...
    
    def quantize_weight_per_channel_impl(self, weight_name, weight_qType, channel_axis, reduce_range=..., keep_float_weight=...): # -> tuple[Any, Any, Any]:
        ...
    
    def adjust_tensor_ranges(self): # -> None:
        ...
    


