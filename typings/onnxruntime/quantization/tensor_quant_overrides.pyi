"""
This type stub file was generated by pyright.
"""

import onnx
from collections.abc import MutableMapping
from dataclasses import dataclass
from typing import Any
from .quant_utils import QuantType

@dataclass
class QuantTypeInfo:
    """
    The quantization type information for a tensor override.
    """
    quant_type: QuantType
    symmetric: bool | None = ...
    reduce_range: bool | None = ...
    axis: int | None = ...
    def __eq__(self, other: object) -> bool:
        ...
    
    @staticmethod
    def load_from_dict(raw_dict: dict[str, Any], default_qtype: QuantType | None = ..., default_symmetric: bool | None = ..., default_reduce_range: bool | None = ...) -> QuantTypeInfo:
        ...
    
    def save_to_dict(self, raw_dict: dict[str, Any]): # -> None:
        ...
    


class TensorQuantOverridesHelper(MutableMapping):
    """
    Utility wrapper over the tensor quantization overrides passed via extra_options.
    """
    def __init__(self, raw_overrides: dict[str, list[dict[str, Any]]]) -> None:
        ...
    
    def has_per_tensor_overrides(self, tensor_name: str) -> bool:
        ...
    
    def has_per_channel_overrides(self, tensor_name: str) -> bool:
        ...
    
    def overrides_scale_zp(self, tensor_name: str) -> bool:
        ...
    
    def get_per_tensor_overrides(self, tensor_name: str, default_val: dict[str, Any] | None = ...) -> dict[str, Any] | None:
        ...
    
    def get_per_channel_overrides(self, tensor_name: str, default_val: list[dict[str, Any]] | None = ...) -> list[dict[str, Any]] | None:
        ...
    
    def get_quant_types(self) -> set[QuantType]:
        ...
    
    def is_valid(self, initializers: dict[str, onnx.TensorProto], activation_names: set[str], default_activation_qtype) -> tuple[bool, str | None]:
        ...
    
    def update_tensor_overrides(self, tensor_name: str, new_vals: dict[str, Any], channels: list[int] | None = ..., overwrite: bool = ...) -> bool:
        ...
    
    def get_node_output_qtype_info(self, output_name: str, default_qtype: QuantType | None, default_symmetric: bool | None = ...) -> QuantTypeInfo:
        ...
    
    def get_node_input_qtype_info(self, input_name: str, node_name: str, default_qtype: QuantType | None, default_symmetric: bool | None = ..., default_reduce_range: bool | None = ...) -> QuantTypeInfo:
        ...
    
    def pprint_str(self, indent=...) -> str:
        ...
    
    def empty(self) -> bool:
        ...
    
    def get_dict(self) -> dict[str, list[dict[str, Any]]]:
        ...
    
    def __setitem__(self, key: str, value: list[dict]): # -> None:
        ...
    
    def __getitem__(self, key: str) -> list[dict]:
        ...
    
    def __delitem__(self, key: str): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    


