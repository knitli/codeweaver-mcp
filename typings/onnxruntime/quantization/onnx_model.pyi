"""
This type stub file was generated by pyright.
"""

from onnx.onnx_pb import ModelProto

class ONNXModel:
    def __init__(self, model: ModelProto) -> None:
        ...
    
    def nodes(self):
        ...
    
    def initializer(self):
        ...
    
    def initializer_extend(self, inits): # -> None:
        ...
    
    def graph(self):
        ...
    
    def ir_version(self):
        ...
    
    def opset_import(self):
        ...
    
    def set_opset_import(self, domain, version): # -> None:
        ...
    
    def remove_node(self, node): # -> None:
        ...
    
    def remove_nodes(self, nodes_to_remove): # -> None:
        ...
    
    def add_node(self, node): # -> None:
        ...
    
    def add_nodes(self, nodes_to_add): # -> None:
        ...
    
    def add_initializer(self, tensor): # -> None:
        ...
    
    def get_initializer(self, name): # -> None:
        ...
    
    def find_graph_input(self, input_name): # -> None:
        ...
    
    def find_graph_output(self, output_name): # -> None:
        ...
    
    def get_tensor_type(self, tensor_name: str): # -> None:
        ...
    
    def get_constant_value(self, output_name): # -> None:
        ...
    
    def get_initializer_name_set(self): # -> set[Any]:
        ...
    
    def remove_initializer(self, tensor): # -> None:
        ...
    
    def remove_initializers(self, init_to_remove): # -> None:
        ...
    
    def get_non_initializer_inputs(self): # -> set[Any]:
        ...
    
    def input_name_to_nodes(self): # -> dict[Any, Any]:
        ...
    
    def output_name_to_node(self): # -> dict[Any, Any]:
        ...
    
    def get_children(self, node, input_name_to_nodes=...): # -> list[Any]:
        ...
    
    def get_parents(self, node, output_name_to_node=...): # -> list[Any]:
        ...
    
    def get_parent(self, node, idx, output_name_to_node=...): # -> None:
        ...
    
    def find_node_by_name(self, node_name, new_nodes_list, graph): # -> None:
        """Find out if a node exists in a graph or a node is in the
        new set of nodes created during quantization.

        Returns:
            The node found or None.
        """
        ...
    
    def get_largest_node_name_suffix(self, node_name_prefix): # -> int:
        """
        Gets the largest node name (int) suffix for all node names that begin with `node_name_prefix`.
        Example: for nodes my_prefix_0 and my_prefix_3, this method returns 3.
        """
        ...
    
    def get_largest_initializer_name_suffix(self, initializer_name_prefix): # -> int:
        """
        Gets the largest initializer name integer suffix for all initializer names that begin
        with `initializer_name_prefix`. This can be used to create unique initializer names.

        Example: for initializer names 'my_weight_0' and 'my_weight_3', this method returns 3 if
                 `initializer_name_prefix` is 'my_weight_'.
        """
        ...
    
    def find_nodes_by_initializer(self, graph, initializer): # -> list[Any]:
        """
        Find all nodes with given initializer as an input.
        """
        ...
    
    def replace_gemm_with_matmul(self): # -> None:
        ...
    
    def save_model_to_file(self, output_path, use_external_data_format=...): # -> None:
        """
        Save model to external data, which is needed for model size > 2GB
        """
        ...
    
    @staticmethod
    def replace_node_input(node, old_input_name, new_input_name): # -> None:
        ...
    
    def replace_input_of_all_nodes(self, old_input_name, new_input_name): # -> None:
        ...
    
    def replace_input_of_nodes(self, old_input_name, new_input_name, node_names_set): # -> None:
        ...
    
    @staticmethod
    def replace_node_output(node, old_output_name, new_output_name): # -> None:
        ...
    
    def replace_output_of_all_nodes(self, old_output_name, new_output_name): # -> None:
        ...
    
    def replace_output_of_nodes(self, old_output_name, new_output_name, node_names_set): # -> None:
        ...
    
    def remove_unused_constant(self): # -> None:
        ...
    
    def is_graph_output(self, output_name): # -> bool:
        ...
    
    def is_graph_input(self, tensor_name: str) -> bool:
        ...
    
    def topological_sort(self): # -> None:
        ...
    
    def clean_initializers(self): # -> tuple[Any, set[Any]]:
        ...
    


