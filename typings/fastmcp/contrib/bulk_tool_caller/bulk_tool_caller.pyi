"""
This type stub file was generated by pyright.
"""

from typing import Any
from mcp.types import CallToolResult
from pydantic import BaseModel
from fastmcp import FastMCP
from fastmcp.contrib.mcp_mixin.mcp_mixin import MCPMixin, mcp_tool

class CallToolRequest(BaseModel):
    """A class to represent a request to call a tool with specific arguments."""
    tool: str = ...
    arguments: dict[str, Any] = ...


class CallToolRequestResult(CallToolResult):
    """
    A class to represent the result of a bulk tool call.
    It extends CallToolResult to include information about the requested tool call.
    """
    tool: str = ...
    arguments: dict[str, Any] = ...
    @classmethod
    def from_call_tool_result(cls, result: CallToolResult, tool: str, arguments: dict[str, Any]) -> CallToolRequestResult:
        """
        Create a CallToolRequestResult from a CallToolResult.
        """
        ...
    


class BulkToolCaller(MCPMixin):
    """
    A class to provide a "bulk tool call" tool for a FastMCP server
    """
    def register_tools(self, mcp_server: FastMCP, prefix: str | None = ..., separator: str = ...) -> None:
        """
        Register the tools provided by this class with the given MCP server.
        """
        ...
    
    @mcp_tool()
    async def call_tools_bulk(self, tool_calls: list[CallToolRequest], continue_on_error: bool = ...) -> list[CallToolRequestResult]:
        """
        Call multiple tools registered on this MCP server in a single request. Each call can
         be for a different tool and can include different arguments. Useful for speeding up
         what would otherwise take several individual tool calls.
        """
        ...
    
    @mcp_tool()
    async def call_tool_bulk(self, tool: str, tool_arguments: list[dict[str, str | int | float | bool | None]], continue_on_error: bool = ...) -> list[CallToolRequestResult]:
        """
        Call a single tool registered on this MCP server multiple times with a single request.
         Each call can include different arguments. Useful for speeding up what would otherwise
         take several individual tool calls.

        Args:
            tool: The name of the tool to call.
            tool_arguments: A list of dictionaries, where each dictionary contains the arguments for an individual run of the tool.
        """
        ...
    


