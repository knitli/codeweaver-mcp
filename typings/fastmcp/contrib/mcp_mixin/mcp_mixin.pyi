"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Any, TYPE_CHECKING
from mcp.types import ToolAnnotations
from fastmcp.server import FastMCP

"""Provides a base mixin class and decorators for easy registration of class methods with FastMCP."""
if TYPE_CHECKING:
    ...
_MCP_REGISTRATION_TOOL_ATTR = ...
_MCP_REGISTRATION_RESOURCE_ATTR = ...
_MCP_REGISTRATION_PROMPT_ATTR = ...
_DEFAULT_SEPARATOR_TOOL = ...
_DEFAULT_SEPARATOR_RESOURCE = ...
_DEFAULT_SEPARATOR_PROMPT = ...
def mcp_tool(name: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., annotations: ToolAnnotations | dict[str, Any] | None = ..., exclude_args: list[str] | None = ..., serializer: Callable[[Any], str] | None = ..., enabled: bool | None = ...) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
    """Decorator to mark a method as an MCP tool for later registration."""
    ...

def mcp_resource(uri: str, *, name: str | None = ..., description: str | None = ..., mime_type: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
    """Decorator to mark a method as an MCP resource for later registration."""
    ...

def mcp_prompt(name: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
    """Decorator to mark a method as an MCP prompt for later registration."""
    ...

class MCPMixin:
    """Base mixin class for objects that can register tools, resources, and prompts
    with a FastMCP server instance using decorators.

    This mixin provides methods like `register_all`, `register_tools`, etc.,
    which iterate over the methods of the inheriting class, find methods
    decorated with `@mcp_tool`, `@mcp_resource`, or `@mcp_prompt`, and
    register them with the provided FastMCP server instance.
    """
    def register_tools(self, mcp_server: FastMCP, prefix: str | None = ..., separator: str = ...) -> None:
        """Registers all methods marked with @mcp_tool with the FastMCP server.

        Args:
            mcp_server: The FastMCP server instance to register tools with.
            prefix: Optional prefix to prepend to tool names. If provided, the
                final name will be f"{prefix}{separator}{original_name}".
            separator: The separator string used between prefix and original name.
                Defaults to '_'.
        """
        ...
    
    def register_resources(self, mcp_server: FastMCP, prefix: str | None = ..., separator: str = ...) -> None:
        """Registers all methods marked with @mcp_resource with the FastMCP server.

        Args:
            mcp_server: The FastMCP server instance to register resources with.
            prefix: Optional prefix to prepend to resource names and URIs. If provided,
                the final name will be f"{prefix}{separator}{original_name}" and the
                final URI will be f"{prefix}{separator}{original_uri}".
            separator: The separator string used between prefix and original name/URI.
                Defaults to '+'.
        """
        ...
    
    def register_prompts(self, mcp_server: FastMCP, prefix: str | None = ..., separator: str = ...) -> None:
        """Registers all methods marked with @mcp_prompt with the FastMCP server.

        Args:
            mcp_server: The FastMCP server instance to register prompts with.
            prefix: Optional prefix to prepend to prompt names. If provided, the
                final name will be f"{prefix}{separator}{original_name}".
            separator: The separator string used between prefix and original name.
                Defaults to '_'.
        """
        ...
    
    def register_all(self, mcp_server: FastMCP, prefix: str | None = ..., tool_separator: str = ..., resource_separator: str = ..., prompt_separator: str = ...) -> None:
        """Registers all marked tools, resources, and prompts with the server.

        This method calls `register_tools`, `register_resources`, and `register_prompts`
        internally, passing the provided prefix and separators.

        Args:
            mcp_server: The FastMCP server instance to register with.
            prefix: Optional prefix applied to all registered items unless overridden
                by a specific separator argument.
            tool_separator: Separator for tool names (defaults to '_').
            resource_separator: Separator for resource names/URIs (defaults to '+').
            prompt_separator: Separator for prompt names (defaults to '_').
        """
        ...
    


