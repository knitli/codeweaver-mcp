"""
This type stub file was generated by pyright.
"""

from collections.abc import Awaitable, Callable
from typing import Any, TYPE_CHECKING
from mcp import GetPromptResult
from fastmcp.prompts.prompt import FunctionPrompt, Prompt, PromptResult
from fastmcp.settings import DuplicateBehavior
from fastmcp.server.server import MountedServer

if TYPE_CHECKING:
    ...
logger = ...
class PromptManager:
    """Manages FastMCP prompts."""
    def __init__(self, duplicate_behavior: DuplicateBehavior | None = ..., mask_error_details: bool | None = ...) -> None:
        ...
    
    def mount(self, server: MountedServer) -> None:
        """Adds a mounted server as a source for prompts."""
        ...
    
    async def has_prompt(self, key: str) -> bool:
        """Check if a prompt exists."""
        ...
    
    async def get_prompt(self, key: str) -> Prompt:
        """Get prompt by key."""
        ...
    
    async def get_prompts(self) -> dict[str, Prompt]:
        """
        Gets the complete, unfiltered inventory of all prompts.
        """
        ...
    
    async def list_prompts(self) -> list[Prompt]:
        """
        Lists all prompts, applying protocol filtering.
        """
        ...
    
    def add_prompt_from_fn(self, fn: Callable[..., PromptResult | Awaitable[PromptResult]], name: str | None = ..., description: str | None = ..., tags: set[str] | None = ...) -> FunctionPrompt:
        """Create a prompt from a function."""
        ...
    
    def add_prompt(self, prompt: Prompt) -> Prompt:
        """Add a prompt to the manager."""
        ...
    
    async def render_prompt(self, name: str, arguments: dict[str, Any] | None = ...) -> GetPromptResult:
        """
        Internal API for servers: Finds and renders a prompt, respecting the
        filtered protocol path.
        """
        ...
    


