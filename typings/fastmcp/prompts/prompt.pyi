"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from collections.abc import Awaitable, Callable, Sequence
from typing import Any
from mcp.types import ContentBlock, Prompt as MCPPrompt, PromptMessage, Role
from fastmcp.utilities.components import FastMCPComponent
from fastmcp.utilities.types import FastMCPBaseModel

"""Base classes for FastMCP prompts."""
logger = ...
def Message(content: str | ContentBlock, role: Role | None = ..., **kwargs: Any) -> PromptMessage:
    """A user-friendly constructor for PromptMessage."""
    ...

message_validator = ...
SyncPromptResult = str | PromptMessage | dict[str, Any] | Sequence[str | PromptMessage | dict[str, Any]]
PromptResult = SyncPromptResult | Awaitable[SyncPromptResult]
class PromptArgument(FastMCPBaseModel):
    """An argument that can be passed to a prompt."""
    name: str = ...
    description: str | None = ...
    required: bool = ...


class Prompt(FastMCPComponent, ABC):
    """A prompt template that can be rendered with parameters."""
    arguments: list[PromptArgument] | None = ...
    def enable(self) -> None:
        ...
    
    def disable(self) -> None:
        ...
    
    def to_mcp_prompt(self, **overrides: Any) -> MCPPrompt:
        """Convert the prompt to an MCP prompt."""
        ...
    
    @staticmethod
    def from_function(fn: Callable[..., PromptResult | Awaitable[PromptResult]], name: str | None = ..., title: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionPrompt:
        """Create a Prompt from a function.

        The function can return:
        - A string (converted to a message)
        - A Message object
        - A dict (converted to a message)
        - A sequence of any of the above
        """
        ...
    
    @abstractmethod
    async def render(self, arguments: dict[str, Any] | None = ...) -> list[PromptMessage]:
        """Render the prompt with arguments."""
        ...
    


class FunctionPrompt(Prompt):
    """A prompt that is a function."""
    fn: Callable[..., PromptResult | Awaitable[PromptResult]]
    @classmethod
    def from_function(cls, fn: Callable[..., PromptResult | Awaitable[PromptResult]], name: str | None = ..., title: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionPrompt:
        """Create a Prompt from a function.

        The function can return:
        - A string (converted to a message)
        - A Message object
        - A dict (converted to a message)
        - A sequence of any of the above
        """
        ...
    
    async def render(self, arguments: dict[str, Any] | None = ...) -> list[PromptMessage]:
        """Render the prompt with arguments."""
        ...
    


