"""
This type stub file was generated by pyright.
"""

import datetime
import httpx
from pathlib import Path
from typing import Annotated, Any, Literal, TYPE_CHECKING
from pydantic import AnyUrl, BaseModel, Field
from fastmcp.client.transports import SSETransport, StdioTransport, StreamableHttpTransport

"""Canonical MCP Configuration Format.

This module defines the standard configuration format for Model Context Protocol (MCP) servers.
It provides a client-agnostic, extensible format that can be used across all MCP implementations.

The configuration format supports both stdio and remote (HTTP/SSE) transports, with comprehensive
field definitions for server metadata, authentication, and execution parameters.

Example configuration:
    {
        "mcpServers": {
            "my-server": {
                "command": "npx",
                "args": ["-y", "@my/mcp-server"],
                "env": {"API_KEY": "secret"},
                "timeout": 30000,
                "description": "My MCP server"
            }
        }
    }
"""
if TYPE_CHECKING:
    ...
def infer_transport_type_from_url(url: str | AnyUrl) -> Literal["http", "sse"]:
    """
    Infer the appropriate transport type from the given URL.
    """
    ...

class StdioMCPServer(BaseModel):
    """MCP server configuration for stdio transport.

    This is the canonical configuration format for MCP servers using stdio transport.
    """
    command: str
    args: list[str] = ...
    env: dict[str, Any] = ...
    transport: Literal["stdio"] = ...
    type: Literal["stdio"] | None = ...
    cwd: str | None = ...
    timeout: int | None = ...
    description: str | None = ...
    icon: str | None = ...
    authentication: dict[str, Any] | None = ...
    model_config = ...
    def to_transport(self) -> StdioTransport:
        ...
    


class RemoteMCPServer(BaseModel):
    """MCP server configuration for HTTP/SSE transport.

    This is the canonical configuration format for MCP servers using remote transports.
    """
    url: str
    transport: Literal["http", "streamable-http", "sse"] | None = ...
    headers: dict[str, str] = ...
    auth: Annotated[str | Literal["oauth"] | httpx.Auth | None, Field(description='Either a string representing a Bearer token, the literal "oauth" to use OAuth authentication, or an httpx.Auth instance for custom authentication.'),] = ...
    sse_read_timeout: datetime.timedelta | int | float | None = ...
    timeout: int | None = ...
    description: str | None = ...
    icon: str | None = ...
    authentication: dict[str, Any] | None = ...
    model_config = ...
    def to_transport(self) -> StreamableHttpTransport | SSETransport:
        ...
    


class MCPConfig(BaseModel):
    """Canonical MCP configuration format.

    This defines the standard configuration format for Model Context Protocol servers.
    The format is designed to be client-agnostic and extensible for future use cases.
    """
    mcpServers: dict[str, StdioMCPServer | RemoteMCPServer]
    model_config = ...
    @classmethod
    def from_dict(cls, config: dict[str, Any]) -> MCPConfig:
        """Parse MCP configuration from dictionary format."""
        ...
    
    def to_dict(self) -> dict[str, Any]:
        """Convert MCPConfig to dictionary format, preserving all fields."""
        ...
    
    def write_to_file(self, file_path: Path) -> None:
        """Write configuration to JSON file."""
        ...
    
    @classmethod
    def from_file(cls, file_path: Path) -> MCPConfig:
        """Load configuration from JSON file."""
        ...
    
    def add_server(self, name: str, server: StdioMCPServer | RemoteMCPServer) -> None:
        """Add or update a server in the configuration."""
        ...
    
    def remove_server(self, name: str) -> None:
        """Remove a server from the configuration."""
        ...
    


def update_config_file(file_path: Path, server_name: str, server_config: StdioMCPServer | RemoteMCPServer) -> None:
    """Update MCP configuration file with new server, preserving existing fields."""
    ...

