"""
This type stub file was generated by pyright.
"""

import enum
import httpx
from collections.abc import Callable
from dataclasses import dataclass
from re import Pattern
from typing import Any, Literal, TYPE_CHECKING
from mcp.types import ToolAnnotations
from fastmcp.resources import Resource, ResourceTemplate
from fastmcp.server.server import FastMCP
from fastmcp.tools.tool import Tool, ToolResult
from fastmcp.utilities import openapi
from fastmcp.utilities.openapi import HTTPRoute
from fastmcp.server import Context

"""FastMCP server implementation for OpenAPI integration."""
if TYPE_CHECKING:
    ...
logger = ...
HttpMethod = Literal['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD']
RouteMapFn = Callable[[HTTPRoute, 'MCPType'], 'MCPType | None']
ComponentFn = Callable[[HTTPRoute, 'OpenAPITool | OpenAPIResource | OpenAPIResourceTemplate'], None]
class MCPType(enum.Enum):
    """Type of FastMCP component to create from a route.

    Enum values:
        TOOL: Convert the route to a callable Tool
        RESOURCE: Convert the route to a Resource (typically GET endpoints)
        RESOURCE_TEMPLATE: Convert the route to a ResourceTemplate (typically GET with path params)
        EXCLUDE: Exclude the route from being converted to any MCP component
        IGNORE: Deprecated, use EXCLUDE instead
    """
    TOOL = ...
    RESOURCE = ...
    RESOURCE_TEMPLATE = ...
    EXCLUDE = ...


class RouteType(enum.Enum):
    """
    Deprecated: Use MCPType instead.

    This enum is kept for backward compatibility and will be removed in a future version.
    """
    TOOL = ...
    RESOURCE = ...
    RESOURCE_TEMPLATE = ...
    IGNORE = ...


@dataclass(kw_only=True)
class RouteMap:
    """Mapping configuration for HTTP routes to FastMCP component types."""
    methods: list[HttpMethod] | Literal['*'] = ...
    pattern: Pattern[str] | str = ...
    route_type: RouteType | MCPType | None = ...
    tags: set[str] = ...
    mcp_type: MCPType | None = ...
    mcp_tags: set[str] = ...
    def __post_init__(self): # -> None:
        """Validate and process the route map after initialization."""
        ...
    


DEFAULT_ROUTE_MAPPINGS = ...
class OpenAPITool(Tool):
    """Tool implementation for OpenAPI endpoints."""
    def __init__(self, client: httpx.AsyncClient, route: openapi.HTTPRoute, name: str, description: str, parameters: dict[str, Any], output_schema: dict[str, Any] | None = ..., tags: set[str] | None = ..., timeout: float | None = ..., annotations: ToolAnnotations | None = ..., serializer: Callable[[Any], str] | None = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        """Custom representation to prevent recursion errors when printing."""
        ...
    
    async def run(self, arguments: dict[str, Any]) -> ToolResult:
        """Execute the HTTP request based on the route configuration."""
        ...
    


class OpenAPIResource(Resource):
    """Resource implementation for OpenAPI endpoints."""
    def __init__(self, client: httpx.AsyncClient, route: openapi.HTTPRoute, uri: str, name: str, description: str, mime_type: str = ..., tags: set[str] = ..., timeout: float | None = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        """Custom representation to prevent recursion errors when printing."""
        ...
    
    async def read(self) -> str | bytes:
        """Fetch the resource data by making an HTTP request."""
        ...
    


class OpenAPIResourceTemplate(ResourceTemplate):
    """Resource template implementation for OpenAPI endpoints."""
    def __init__(self, client: httpx.AsyncClient, route: openapi.HTTPRoute, uri_template: str, name: str, description: str, parameters: dict[str, Any], tags: set[str] = ..., timeout: float | None = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        """Custom representation to prevent recursion errors when printing."""
        ...
    
    async def create_resource(self, uri: str, params: dict[str, Any], context: Context | None = ...) -> Resource:
        """Create a resource with the given parameters."""
        ...
    


class FastMCPOpenAPI(FastMCP):
    """
    FastMCP server implementation that creates components from an OpenAPI schema.

    This class parses an OpenAPI specification and creates appropriate FastMCP components
    (Tools, Resources, ResourceTemplates) based on route mappings.

    Example:
        ```python
        from fastmcp.server.openapi import FastMCPOpenAPI, RouteMap, MCPType
        import httpx

        # Define custom route mappings
        custom_mappings = [
            # Map all user-related endpoints to ResourceTemplate
            RouteMap(
                methods=["GET", "POST", "PATCH"],
                pattern=r".*/users/.*",
                mcp_type=MCPType.RESOURCE_TEMPLATE
            ),
            # Map all analytics endpoints to Tool
            RouteMap(
                methods=["GET"],
                pattern=r".*/analytics/.*",
                mcp_type=MCPType.TOOL
            ),
        ]

        # Create server with custom mappings and route mapper
        server = FastMCPOpenAPI(
            openapi_spec=spec,
            client=httpx.AsyncClient(),
            name="API Server",
            route_maps=custom_mappings,
        )
        ```
    """
    def __init__(self, openapi_spec: dict[str, Any], client: httpx.AsyncClient, name: str | None = ..., route_maps: list[RouteMap] | None = ..., route_map_fn: RouteMapFn | None = ..., mcp_component_fn: ComponentFn | None = ..., mcp_names: dict[str, str] | None = ..., tags: set[str] | None = ..., timeout: float | None = ..., **settings: Any) -> None:
        """
        Initialize a FastMCP server from an OpenAPI schema.

        Args:
            openapi_spec: OpenAPI schema as a dictionary or file path
            client: httpx AsyncClient for making HTTP requests
            name: Optional name for the server
            route_maps: Optional list of RouteMap objects defining route mappings
            route_map_fn: Optional callable for advanced route type mapping.
                Receives (route, mcp_type) and returns MCPType or None.
                Called on every route, including excluded ones.
            mcp_component_fn: Optional callable for component customization.
                Receives (route, component) and can modify the component in-place.
                Called on every created component.
            mcp_names: Optional dictionary mapping operationId to desired component names.
                If an operationId is not in the dictionary, falls back to using the
                operationId up to the first double underscore. If no operationId exists,
                falls back to slugified summary or path-based naming.
                All names are truncated to 56 characters maximum.
            tags: Optional set of tags to add to all components. Components always receive any tags
                from the route.
            timeout: Optional timeout (in seconds) for all requests
            **settings: Additional settings for FastMCP
        """
        ...
    


