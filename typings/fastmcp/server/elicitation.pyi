"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Generic, Literal, TypeVar
from pydantic import BaseModel

__all__ = ["AcceptedElicitation", "CancelledElicitation", "DeclinedElicitation", "get_elicitation_schema", "ScalarElicitationType"]
logger = ...
T = TypeVar("T")
class AcceptedElicitation(BaseModel, Generic[T]):
    """Result when user accepts the elicitation."""
    action: Literal["accept"] = ...
    data: T


@dataclass
class ScalarElicitationType(Generic[T]):
    value: T
    ...


def get_elicitation_schema(response_type: type[T]) -> dict[str, Any]:
    """Get the schema for an elicitation response.

    Args:
        response_type: The type of the response
    """
    ...

def validate_elicitation_json_schema(schema: dict[str, Any]) -> None:
    """Validate that a JSON schema follows MCP elicitation requirements.

    This ensures the schema is compatible with MCP elicitation requirements:
    - Must be an object schema
    - Must only contain primitive field types (string, number, integer, boolean)
    - Must be flat (no nested objects or arrays of objects)
    - Allows const fields (for Literal types) and enum fields (for Enum types)
    - Only primitive types and their nullable variants are allowed

    Args:
        schema: The JSON schema to validate

    Raises:
        TypeError: If the schema doesn't meet MCP elicitation requirements
    """
    ...

