"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any
from mcp.server.auth.provider import AccessToken, AuthorizationCode, AuthorizationParams, RefreshToken
from mcp.shared.auth import OAuthClientInformationFull, OAuthToken
from pydantic import SecretStr
from typing_extensions import TypedDict
from fastmcp.server.auth.auth import OAuthProvider

class JWKData(TypedDict, total=False):
    """JSON Web Key data structure."""
    kty: str
    kid: str
    use: str
    alg: str
    n: str
    e: str
    x5c: list[str]
    x5t: str
    ...


class JWKSData(TypedDict):
    """JSON Web Key Set data structure."""
    keys: list[JWKData]
    ...


@dataclass(frozen=True, kw_only=True, repr=False)
class RSAKeyPair:
    private_key: SecretStr
    public_key: str
    @classmethod
    def generate(cls) -> RSAKeyPair:
        """
        Generate an RSA key pair for testing.

        Returns:
            tuple: (private_key_pem, public_key_pem)
        """
        ...
    
    def create_token(self, subject: str = ..., issuer: str = ..., audience: str | list[str] | None = ..., scopes: list[str] | None = ..., expires_in_seconds: int = ..., additional_claims: dict[str, Any] | None = ..., kid: str | None = ...) -> str:
        """
        Generate a test JWT token for testing purposes.

        Args:
            private_key_pem: RSA private key in PEM format
            subject: Subject claim (usually user ID)
            issuer: Issuer claim
            audience: Audience claim - can be a string or list of strings (optional)
            scopes: List of scopes to include
            expires_in_seconds: Token expiration time in seconds
            additional_claims: Any additional claims to include
            kid: Key ID for JWKS lookup (optional)

        Returns:
            Signed JWT token string
        """
        ...
    


class BearerAuthProvider(OAuthProvider):
    """
    Simple JWT Bearer Token validator for hosted MCP servers.
    Uses RS256 asymmetric encryption by default but supports all JWA algorithms. Supports either static public key
    or JWKS URI for key rotation.

    Note that this provider DOES NOT permit client registration or revocation, or any OAuth flows.
    It is intended to be used with a control plane that manages clients and tokens.
    """
    def __init__(self, public_key: str | None = ..., jwks_uri: str | None = ..., issuer: str | None = ..., algorithm: str | None = ..., audience: str | list[str] | None = ..., required_scopes: list[str] | None = ...) -> None:
        """
        Initialize the provider. Either public_key or jwks_uri must be provided.

        Args:
            public_key: RSA public key in PEM format (for static key)
            jwks_uri: URI to fetch keys from (for key rotation)
            issuer: Expected issuer claim (optional)
            algorithm: Algorithm to use for verification (optional, defaults to RS256)
            audience: Expected audience claim - can be a string or list of strings (optional)
            required_scopes: List of required scopes for access (optional)
        """
        ...
    
    async def load_access_token(self, token: str) -> AccessToken | None:
        """
        Validates the provided JWT bearer token.

        Args:
            token: The JWT token string to validate

        Returns:
            AccessToken object if valid, None if invalid or expired
        """
        ...
    
    async def verify_token(self, token: str) -> AccessToken | None:
        """
        Verify a bearer token and return access info if valid.

        This method implements the TokenVerifier protocol by delegating
        to our existing load_access_token method.

        Args:
            token: The JWT token string to validate

        Returns:
            AccessToken object if valid, None if invalid or expired
        """
        ...
    
    async def get_client(self, client_id: str) -> OAuthClientInformationFull | None:
        ...
    
    async def register_client(self, client_info: OAuthClientInformationFull) -> None:
        ...
    
    async def authorize(self, client: OAuthClientInformationFull, params: AuthorizationParams) -> str:
        ...
    
    async def load_authorization_code(self, client: OAuthClientInformationFull, authorization_code: str) -> AuthorizationCode | None:
        ...
    
    async def exchange_authorization_code(self, client: OAuthClientInformationFull, authorization_code: AuthorizationCode) -> OAuthToken:
        ...
    
    async def load_refresh_token(self, client: OAuthClientInformationFull, refresh_token: str) -> RefreshToken | None:
        ...
    
    async def exchange_refresh_token(self, client: OAuthClientInformationFull, refresh_token: RefreshToken, scopes: list[str]) -> OAuthToken:
        ...
    
    async def revoke_token(self, token: AccessToken | RefreshToken) -> None:
        ...
    


