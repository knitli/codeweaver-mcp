"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Generator
from contextlib import contextmanager
from contextvars import ContextVar
from typing import TYPE_CHECKING
from mcp.server.lowlevel.server import LifespanResultT
from mcp.server.streamable_http import EventStore
from starlette.applications import Starlette
from starlette.middleware import Middleware
from starlette.requests import Request
from starlette.routing import BaseRoute
from starlette.types import Lifespan
from fastmcp.server.auth.auth import OAuthProvider
from fastmcp.server.server import FastMCP

if TYPE_CHECKING:
    ...
logger = ...
_current_http_request: ContextVar[Request | None] = ...
class StarletteWithLifespan(Starlette):
    @property
    def lifespan(self) -> Lifespan:
        ...
    


@contextmanager
def set_http_request(request: Request) -> Generator[Request, None, None]:
    ...

class RequestContextMiddleware:
    """
    Middleware that stores each request in a ContextVar
    """
    def __init__(self, app) -> None:
        ...
    
    async def __call__(self, scope, receive, send): # -> None:
        ...
    


def setup_auth_middleware_and_routes(auth: OAuthProvider) -> tuple[list[Middleware], list[BaseRoute], list[str]]:
    """Set up authentication middleware and routes if auth is enabled.

    Args:
        auth: The OAuthProvider authorization server provider

    Returns:
        Tuple of (middleware, auth_routes, required_scopes)
    """
    ...

def create_base_app(routes: list[BaseRoute], middleware: list[Middleware], debug: bool = ..., lifespan: Callable | None = ...) -> StarletteWithLifespan:
    """Create a base Starlette app with common middleware and routes.

    Args:
        routes: List of routes to include in the app
        middleware: List of middleware to include in the app
        debug: Whether to enable debug mode
        lifespan: Optional lifespan manager for the app

    Returns:
        A Starlette application
    """
    ...

def create_sse_app(server: FastMCP[LifespanResultT], message_path: str, sse_path: str, auth: OAuthProvider | None = ..., debug: bool = ..., routes: list[BaseRoute] | None = ..., middleware: list[Middleware] | None = ...) -> StarletteWithLifespan:
    """Return an instance of the SSE server app.

    Args:
        server: The FastMCP server instance
        message_path: Path for SSE messages
        sse_path: Path for SSE connections
        auth: Optional auth provider
        debug: Whether to enable debug mode
        routes: Optional list of custom routes
        middleware: Optional list of middleware
    Returns:
        A Starlette application with RequestContextMiddleware
    """
    ...

def create_streamable_http_app(server: FastMCP[LifespanResultT], streamable_http_path: str, event_store: EventStore | None = ..., auth: OAuthProvider | None = ..., json_response: bool = ..., stateless_http: bool = ..., debug: bool = ..., routes: list[BaseRoute] | None = ..., middleware: list[Middleware] | None = ...) -> StarletteWithLifespan:
    """Return an instance of the StreamableHTTP server app.

    Args:
        server: The FastMCP server instance
        streamable_http_path: Path for StreamableHTTP connections
        event_store: Optional event store for session management
        auth: Optional auth provider
        json_response: Whether to use JSON response format
        stateless_http: Whether to use stateless mode (new transport per request)
        debug: Whether to enable debug mode
        routes: Optional list of custom routes
        middleware: Optional list of middleware

    Returns:
        A Starlette application with StreamableHTTP support
    """
    ...

