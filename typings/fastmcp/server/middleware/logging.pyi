"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any
from .middleware import CallNext, Middleware, MiddlewareContext

"""Comprehensive logging middleware for FastMCP servers."""
class LoggingMiddleware(Middleware):
    """Middleware that provides comprehensive request and response logging.

    Logs all MCP messages with configurable detail levels. Useful for debugging,
    monitoring, and understanding server usage patterns.

    Example:
        ```python
        from fastmcp.server.middleware.logging import LoggingMiddleware
        import logging

        # Configure logging
        logging.basicConfig(level=logging.INFO)

        mcp = FastMCP("MyServer")
        mcp.add_middleware(LoggingMiddleware())
        ```
    """
    def __init__(self, logger: logging.Logger | None = ..., log_level: int = ..., include_payloads: bool = ..., max_payload_length: int = ..., methods: list[str] | None = ...) -> None:
        """Initialize logging middleware.

        Args:
            logger: Logger instance to use. If None, creates a logger named 'fastmcp.requests'
            log_level: Log level for messages (default: INFO)
            include_payloads: Whether to include message payloads in logs
            max_payload_length: Maximum length of payload to log (prevents huge logs)
            methods: List of methods to log. If None, logs all methods.
        """
        ...
    
    async def on_message(self, context: MiddlewareContext, call_next: CallNext) -> Any:
        """Log all messages."""
        ...
    


class StructuredLoggingMiddleware(Middleware):
    """Middleware that provides structured JSON logging for better log analysis.

    Outputs structured logs that are easier to parse and analyze with log
    aggregation tools like ELK stack, Splunk, or cloud logging services.

    Example:
        ```python
        from fastmcp.server.middleware.logging import StructuredLoggingMiddleware
        import logging

        mcp = FastMCP("MyServer")
        mcp.add_middleware(StructuredLoggingMiddleware())
        ```
    """
    def __init__(self, logger: logging.Logger | None = ..., log_level: int = ..., include_payloads: bool = ..., methods: list[str] | None = ...) -> None:
        """Initialize structured logging middleware.

        Args:
            logger: Logger instance to use. If None, creates a logger named 'fastmcp.structured'
            log_level: Log level for messages (default: INFO)
            include_payloads: Whether to include message payloads in logs
            methods: List of methods to log. If None, logs all methods.
        """
        ...
    
    async def on_message(self, context: MiddlewareContext, call_next: CallNext) -> Any:
        """Log structured message information."""
        ...
    


