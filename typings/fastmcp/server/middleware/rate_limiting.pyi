"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Any
from mcp import McpError
from .middleware import CallNext, Middleware, MiddlewareContext

"""Rate limiting middleware for protecting FastMCP servers from abuse."""
class RateLimitError(McpError):
    """Error raised when rate limit is exceeded."""
    def __init__(self, message: str = ...) -> None:
        ...
    


class TokenBucketRateLimiter:
    """Token bucket implementation for rate limiting."""
    def __init__(self, capacity: int, refill_rate: float) -> None:
        """Initialize token bucket.

        Args:
            capacity: Maximum number of tokens in the bucket
            refill_rate: Tokens added per second
        """
        ...
    
    async def consume(self, tokens: int = ...) -> bool:
        """Try to consume tokens from the bucket.

        Args:
            tokens: Number of tokens to consume

        Returns:
            True if tokens were available and consumed, False otherwise
        """
        ...
    


class SlidingWindowRateLimiter:
    """Sliding window rate limiter implementation."""
    def __init__(self, max_requests: int, window_seconds: int) -> None:
        """Initialize sliding window rate limiter.

        Args:
            max_requests: Maximum requests allowed in the time window
            window_seconds: Time window in seconds
        """
        ...
    
    async def is_allowed(self) -> bool:
        """Check if a request is allowed."""
        ...
    


class RateLimitingMiddleware(Middleware):
    """Middleware that implements rate limiting to prevent server abuse.

    Uses a token bucket algorithm by default, allowing for burst traffic
    while maintaining a sustainable long-term rate.

    Example:
        ```python
        from fastmcp.server.middleware.rate_limiting import RateLimitingMiddleware

        # Allow 10 requests per second with bursts up to 20
        rate_limiter = RateLimitingMiddleware(
            max_requests_per_second=10,
            burst_capacity=20
        )

        mcp = FastMCP("MyServer")
        mcp.add_middleware(rate_limiter)
        ```
    """
    def __init__(self, max_requests_per_second: float = ..., burst_capacity: int | None = ..., get_client_id: Callable[[MiddlewareContext], str] | None = ..., global_limit: bool = ...) -> None:
        """Initialize rate limiting middleware.

        Args:
            max_requests_per_second: Sustained requests per second allowed
            burst_capacity: Maximum burst capacity. If None, defaults to 2x max_requests_per_second
            get_client_id: Function to extract client ID from context. If None, uses global limiting
            global_limit: If True, apply limit globally; if False, per-client
        """
        ...
    
    async def on_request(self, context: MiddlewareContext, call_next: CallNext) -> Any:
        """Apply rate limiting to requests."""
        ...
    


class SlidingWindowRateLimitingMiddleware(Middleware):
    """Middleware that implements sliding window rate limiting.

    Uses a sliding window approach which provides more precise rate limiting
    but uses more memory to track individual request timestamps.

    Example:
        ```python
        from fastmcp.server.middleware.rate_limiting import SlidingWindowRateLimitingMiddleware

        # Allow 100 requests per minute
        rate_limiter = SlidingWindowRateLimitingMiddleware(
            max_requests=100,
            window_minutes=1
        )

        mcp = FastMCP("MyServer")
        mcp.add_middleware(rate_limiter)
        ```
    """
    def __init__(self, max_requests: int, window_minutes: int = ..., get_client_id: Callable[[MiddlewareContext], str] | None = ...) -> None:
        """Initialize sliding window rate limiting middleware.

        Args:
            max_requests: Maximum requests allowed in the time window
            window_minutes: Time window in minutes
            get_client_id: Function to extract client ID from context
        """
        ...
    
    async def on_request(self, context: MiddlewareContext, call_next: CallNext) -> Any:
        """Apply sliding window rate limiting to requests."""
        ...
    


