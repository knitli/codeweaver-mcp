"""
This type stub file was generated by pyright.
"""

import mcp.types
from collections.abc import Callable
from pathlib import Path
from typing import Any, TYPE_CHECKING
from mcp.client.session import ClientSession
from mcp.shared.context import LifespanContextT, RequestContext
from mcp.types import GetPromptResult
from pydantic.networks import AnyUrl
from fastmcp.client.client import Client, FastMCP1Server
from fastmcp.client.elicitation import ElicitResult
from fastmcp.client.logging import LogMessage
from fastmcp.client.roots import RootsList
from fastmcp.client.transports import ClientTransportT
from fastmcp.mcp_config import MCPConfig
from fastmcp.prompts import Prompt, PromptMessage
from fastmcp.prompts.prompt_manager import PromptManager
from fastmcp.resources import Resource, ResourceTemplate
from fastmcp.resources.resource_manager import ResourceManager
from fastmcp.server.context import Context
from fastmcp.server.server import FastMCP
from fastmcp.tools.tool import Tool, ToolResult
from fastmcp.tools.tool_manager import ToolManager
from fastmcp.utilities.components import MirroredComponent
from fastmcp.server import Context

if TYPE_CHECKING:
    ...
logger = ...
class ProxyToolManager(ToolManager):
    """A ToolManager that sources its tools from a remote client in addition to local and mounted tools."""
    def __init__(self, client_factory: Callable[[], Client], **kwargs) -> None:
        ...
    
    async def get_tools(self) -> dict[str, Tool]:
        """Gets the unfiltered tool inventory including local, mounted, and proxy tools."""
        ...
    
    async def list_tools(self) -> list[Tool]:
        """Gets the filtered list of tools including local, mounted, and proxy tools."""
        ...
    
    async def call_tool(self, key: str, arguments: dict[str, Any]) -> ToolResult:
        """Calls a tool, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyResourceManager(ResourceManager):
    """A ResourceManager that sources its resources from a remote client in addition to local and mounted resources."""
    def __init__(self, client_factory: Callable[[], Client], **kwargs) -> None:
        ...
    
    async def get_resources(self) -> dict[str, Resource]:
        """Gets the unfiltered resource inventory including local, mounted, and proxy resources."""
        ...
    
    async def get_resource_templates(self) -> dict[str, ResourceTemplate]:
        """Gets the unfiltered template inventory including local, mounted, and proxy templates."""
        ...
    
    async def list_resources(self) -> list[Resource]:
        """Gets the filtered list of resources including local, mounted, and proxy resources."""
        ...
    
    async def list_resource_templates(self) -> list[ResourceTemplate]:
        """Gets the filtered list of templates including local, mounted, and proxy templates."""
        ...
    
    async def read_resource(self, uri: AnyUrl | str) -> str | bytes:
        """Reads a resource, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyPromptManager(PromptManager):
    """A PromptManager that sources its prompts from a remote client in addition to local and mounted prompts."""
    def __init__(self, client_factory: Callable[[], Client], **kwargs) -> None:
        ...
    
    async def get_prompts(self) -> dict[str, Prompt]:
        """Gets the unfiltered prompt inventory including local, mounted, and proxy prompts."""
        ...
    
    async def list_prompts(self) -> list[Prompt]:
        """Gets the filtered list of prompts including local, mounted, and proxy prompts."""
        ...
    
    async def render_prompt(self, name: str, arguments: dict[str, Any] | None = ...) -> GetPromptResult:
        """Renders a prompt, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyTool(Tool, MirroredComponent):
    """
    A Tool that represents and executes a tool on a remote server.
    """
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_tool(cls, client: Client, mcp_tool: mcp.types.Tool) -> ProxyTool:
        """Factory method to create a ProxyTool from a raw MCP tool schema."""
        ...
    
    async def run(self, arguments: dict[str, Any], context: Context | None = ...) -> ToolResult:
        """Executes the tool by making a call through the client."""
        ...
    


class ProxyResource(Resource, MirroredComponent):
    """
    A Resource that represents and reads a resource from a remote server.
    """
    _client: Client
    _value: str | bytes | None = ...
    def __init__(self, client: Client, *, _value: str | bytes | None = ..., **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_resource(cls, client: Client, mcp_resource: mcp.types.Resource) -> ProxyResource:
        """Factory method to create a ProxyResource from a raw MCP resource schema."""
        ...
    
    async def read(self) -> str | bytes:
        """Read the resource content from the remote server."""
        ...
    


class ProxyTemplate(ResourceTemplate, MirroredComponent):
    """
    A ResourceTemplate that represents and creates resources from a remote server template.
    """
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_template(cls, client: Client, mcp_template: mcp.types.ResourceTemplate) -> ProxyTemplate:
        """Factory method to create a ProxyTemplate from a raw MCP template schema."""
        ...
    
    async def create_resource(self, uri: str, params: dict[str, Any], context: Context | None = ...) -> ProxyResource:
        """Create a resource from the template by calling the remote server."""
        ...
    


class ProxyPrompt(Prompt, MirroredComponent):
    """
    A Prompt that represents and renders a prompt from a remote server.
    """
    _client: Client
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_prompt(cls, client: Client, mcp_prompt: mcp.types.Prompt) -> ProxyPrompt:
        """Factory method to create a ProxyPrompt from a raw MCP prompt schema."""
        ...
    
    async def render(self, arguments: dict[str, Any]) -> list[PromptMessage]:
        """Render the prompt by making a call through the client."""
        ...
    


class FastMCPProxy(FastMCP):
    """
    A FastMCP server that acts as a proxy to a remote MCP-compliant server.
    It uses specialized managers that fulfill requests via a client factory.
    """
    def __init__(self, client: Client | None = ..., *, client_factory: Callable[[], Client] | None = ..., **kwargs) -> None:
        """
        Initializes the proxy server.

        FastMCPProxy requires explicit session management via client_factory.
        Use FastMCP.as_proxy() for convenience with automatic session strategy.

        Args:
            client: [DEPRECATED] A Client instance. Use client_factory instead for explicit
                   session management. When provided, a client_factory will be automatically
                   created that provides session isolation for backwards compatibility.
            client_factory: A callable that returns a Client instance when called.
                           This gives you full control over session creation and reuse.
            **kwargs: Additional settings for the FastMCP server.
        """
        ...
    


async def default_proxy_roots_handler(context: RequestContext[ClientSession, LifespanContextT]) -> RootsList:
    """
    A handler that forwards the list roots request from the remote server to the proxy's connected clients and relays the response back to the remote server.
    """
    ...

class ProxyClient(Client[ClientTransportT]):
    """
    A proxy client that forwards advanced interactions between a remote MCP server and the proxy's connected clients.
    Supports forwarding roots, sampling, elicitation, logging, and progress.
    """
    def __init__(self, transport: ClientTransportT | FastMCP | FastMCP1Server | AnyUrl | Path | MCPConfig | dict[str, Any] | str, **kwargs) -> None:
        ...
    
    @classmethod
    async def default_sampling_handler(cls, messages: list[mcp.types.SamplingMessage], params: mcp.types.CreateMessageRequestParams, context: RequestContext[ClientSession, LifespanContextT]) -> mcp.types.CreateMessageResult:
        """
        A handler that forwards the sampling request from the remote server to the proxy's connected clients and relays the response back to the remote server.
        """
        ...
    
    @classmethod
    async def default_elicitation_handler(cls, message: str, response_type: type, params: mcp.types.ElicitRequestParams, context: RequestContext[ClientSession, LifespanContextT]) -> ElicitResult:
        """
        A handler that forwards the elicitation request from the remote server to the proxy's connected clients and relays the response back to the remote server.
        """
        ...
    
    @classmethod
    async def default_log_handler(cls, message: LogMessage) -> None:
        """
        A handler that forwards the log notification from the remote server to the proxy's connected clients.
        """
        ...
    
    @classmethod
    async def default_progress_handler(cls, progress: float, total: float | None, message: str | None) -> None:
        """
        A handler that forwards the progress notification from the remote server to the proxy's connected clients.
        """
        ...
    


class StatefulProxyClient(ProxyClient[ClientTransportT]):
    """
    A proxy client that provides a stateful client factory for the proxy server.

    The stateful proxy client bound its copy to the server session.
    And it will be disconnected when the session is exited.

    This is useful to proxy a stateful mcp server such as the Playwright MCP server.
    Note that it is essential to ensure that the proxy server itself is also stateful.
    """
    async def __aexit__(self, exc_type, exc_value, traceback) -> None:
        """
        The stateful proxy client will be forced disconnected when the session is exited.
        So we do nothing here.
        """
        ...
    
    def new_stateful(self) -> Client[ClientTransportT]:
        """
        Create a new stateful proxy client instance with the same configuration.

        Use this method as the client factory for stateful proxy server.
        """
        ...
    


