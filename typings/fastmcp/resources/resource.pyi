"""
This type stub file was generated by pyright.
"""

import abc
from collections.abc import Callable
from typing import Annotated, Any, TYPE_CHECKING
from mcp.types import Resource as MCPResource
from pydantic import AnyUrl, UrlConstraints, field_validator, model_validator
from typing_extensions import Self
from fastmcp.utilities.components import FastMCPComponent

"""Base classes and interfaces for FastMCP resources."""
if TYPE_CHECKING:
    ...
class Resource(FastMCPComponent, abc.ABC):
    """Base class for all resources."""
    model_config = ...
    uri: Annotated[AnyUrl, UrlConstraints(host_required=False)] = ...
    name: str = ...
    mime_type: str = ...
    def enable(self) -> None:
        ...
    
    def disable(self) -> None:
        ...
    
    @staticmethod
    def from_function(fn: Callable[..., Any], uri: str | AnyUrl, name: str | None = ..., title: str | None = ..., description: str | None = ..., mime_type: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionResource:
        ...
    
    @field_validator("mime_type", mode="before")
    @classmethod
    def set_default_mime_type(cls, mime_type: str | None) -> str:
        """Set default MIME type if not provided."""
        ...
    
    @model_validator(mode="after")
    def set_default_name(self) -> Self:
        """Set default name from URI if not provided."""
        ...
    
    @abc.abstractmethod
    async def read(self) -> str | bytes:
        """Read the resource content."""
        ...
    
    def to_mcp_resource(self, **overrides: Any) -> MCPResource:
        """Convert the resource to an MCPResource."""
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def key(self) -> str:
        """
        The key of the component. This is used for internal bookkeeping
        and may reflect e.g. prefixes or other identifiers. You should not depend on
        keys having a certain value, as the same tool loaded from different
        hierarchies of servers may have different keys.
        """
        ...
    


class FunctionResource(Resource):
    """A resource that defers data loading by wrapping a function.

    The function is only called when the resource is read, allowing for lazy loading
    of potentially expensive data. This is particularly useful when listing resources,
    as the function won't be called until the resource is actually accessed.

    The function can return:
    - str for text content (default)
    - bytes for binary content
    - other types will be converted to JSON
    """
    fn: Callable[..., Any]
    @classmethod
    def from_function(cls, fn: Callable[..., Any], uri: str | AnyUrl, name: str | None = ..., title: str | None = ..., description: str | None = ..., mime_type: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionResource:
        """Create a FunctionResource from a function."""
        ...
    
    async def read(self) -> str | bytes:
        """Read the resource by calling the wrapped function."""
        ...
    


