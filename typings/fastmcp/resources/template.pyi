"""
This type stub file was generated by pyright.
"""

import re
from collections.abc import Callable
from typing import Any
from mcp.types import ResourceTemplate as MCPResourceTemplate
from pydantic import field_validator
from fastmcp.resources.resource import Resource
from fastmcp.utilities.components import FastMCPComponent

"""Resource template functionality."""
def build_regex(template: str) -> re.Pattern:
    ...

def match_uri_template(uri: str, uri_template: str) -> dict[str, str] | None:
    ...

class ResourceTemplate(FastMCPComponent):
    """A template for dynamically creating resources."""
    uri_template: str = ...
    mime_type: str = ...
    parameters: dict[str, Any] = ...
    def __repr__(self) -> str:
        ...
    
    def enable(self) -> None:
        ...
    
    def disable(self) -> None:
        ...
    
    @staticmethod
    def from_function(fn: Callable[..., Any], uri_template: str, name: str | None = ..., title: str | None = ..., description: str | None = ..., mime_type: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionResourceTemplate:
        ...
    
    @field_validator("mime_type", mode="before")
    @classmethod
    def set_default_mime_type(cls, mime_type: str | None) -> str:
        """Set default MIME type if not provided."""
        ...
    
    def matches(self, uri: str) -> dict[str, Any] | None:
        """Check if URI matches template and extract parameters."""
        ...
    
    async def read(self, arguments: dict[str, Any]) -> str | bytes:
        """Read the resource content."""
        ...
    
    async def create_resource(self, uri: str, params: dict[str, Any]) -> Resource:
        """Create a resource from the template with the given parameters."""
        ...
    
    def to_mcp_template(self, **overrides: Any) -> MCPResourceTemplate:
        """Convert the resource template to an MCPResourceTemplate."""
        ...
    
    @classmethod
    def from_mcp_template(cls, mcp_template: MCPResourceTemplate) -> ResourceTemplate:
        """Creates a FastMCP ResourceTemplate from a raw MCP ResourceTemplate object."""
        ...
    
    @property
    def key(self) -> str:
        """
        The key of the component. This is used for internal bookkeeping
        and may reflect e.g. prefixes or other identifiers. You should not depend on
        keys having a certain value, as the same tool loaded from different
        hierarchies of servers may have different keys.
        """
        ...
    


class FunctionResourceTemplate(ResourceTemplate):
    """A template for dynamically creating resources."""
    fn: Callable[..., Any]
    async def read(self, arguments: dict[str, Any]) -> str | bytes:
        """Read the resource content."""
        ...
    
    @classmethod
    def from_function(cls, fn: Callable[..., Any], uri_template: str, name: str | None = ..., title: str | None = ..., description: str | None = ..., mime_type: str | None = ..., tags: set[str] | None = ..., enabled: bool | None = ...) -> FunctionResourceTemplate:
        """Create a template from a function."""
        ...
    


