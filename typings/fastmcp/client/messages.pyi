


import mcp.types

from mcp.client.session import MessageHandlerFnT
from mcp.shared.session import RequestResponder

type Message = (
    RequestResponder[mcp.types.ServerRequest, mcp.types.ClientResult]
    | mcp.types.ServerNotification
    | Exception
)
type MessageHandlerT = MessageHandlerFnT

class MessageHandler:

    async def __call__(
        self,
        message: RequestResponder[mcp.types.ServerRequest, mcp.types.ClientResult]
        | mcp.types.ServerNotification
        | Exception,
    ) -> None: ...
    async def dispatch(self, message: Message) -> None: ...
    async def on_message(self, message: Message) -> None: ...
    async def on_request(
        self, message: RequestResponder[mcp.types.ServerRequest, mcp.types.ClientResult]
    ) -> None: ...
    async def on_ping(self, message: mcp.types.PingRequest) -> None: ...
    async def on_list_roots(self, message: mcp.types.ListRootsRequest) -> None: ...
    async def on_create_message(self, message: mcp.types.CreateMessageRequest) -> None: ...
    async def on_notification(self, message: mcp.types.ServerNotification) -> None: ...
    async def on_exception(self, message: Exception) -> None: ...
    async def on_progress(self, message: mcp.types.ProgressNotification) -> None: ...
    async def on_logging_message(self, message: mcp.types.LoggingMessageNotification) -> None: ...
    async def on_tool_list_changed(
        self, message: mcp.types.ToolListChangedNotification
    ) -> None: ...
    async def on_resource_list_changed(
        self, message: mcp.types.ResourceListChangedNotification
    ) -> None: ...
    async def on_prompt_list_changed(
        self, message: mcp.types.PromptListChangedNotification
    ) -> None: ...
    async def on_resource_updated(self, message: mcp.types.ResourceUpdatedNotification) -> None: ...
    async def on_cancelled(self, message: mcp.types.CancelledNotification) -> None: ...
