"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any
from mcp.client.auth import OAuthClientProvider, TokenStorage
from mcp.shared.auth import OAuthClientInformationFull, OAuthMetadata, OAuthToken as OAuthToken

__all__ = ['OAuth']
logger = ...
def default_cache_dir() -> Path:
    ...

class FileTokenStorage(TokenStorage):
    """
    File-based token storage implementation for OAuth credentials and tokens.
    Implements the mcp.client.auth.TokenStorage protocol.

    Each instance is tied to a specific server URL for proper token isolation.
    """
    def __init__(self, server_url: str, cache_dir: Path | None = ...) -> None:
        """Initialize storage for a specific server URL."""
        ...
    
    @staticmethod
    def get_base_url(url: str) -> str:
        """Extract the base URL (scheme + host) from a URL."""
        ...
    
    def get_cache_key(self) -> str:
        """Generate a safe filesystem key from the server's base URL."""
        ...
    
    async def get_tokens(self) -> OAuthToken | None:
        """Load tokens from file storage."""
        ...
    
    async def set_tokens(self, tokens: OAuthToken) -> None:
        """Save tokens to file storage."""
        ...
    
    async def get_client_info(self) -> OAuthClientInformationFull | None:
        """Load client information from file storage."""
        ...
    
    async def set_client_info(self, client_info: OAuthClientInformationFull) -> None:
        """Save client information to file storage."""
        ...
    
    def clear(self) -> None:
        """Clear all cached data for this server."""
        ...
    
    @classmethod
    def clear_all(cls, cache_dir: Path | None = ...) -> None:
        """Clear all cached data for all servers."""
        ...
    


async def discover_oauth_metadata(server_base_url: str, httpx_kwargs: dict[str, Any] | None = ...) -> OAuthMetadata | None:
    """
    Discover OAuth metadata from the server using RFC 8414 well-known endpoint.

    Args:
        server_base_url: Base URL of the OAuth server (e.g., "https://example.com")
        httpx_kwargs: Additional kwargs for httpx client

    Returns:
        OAuth metadata if found, None otherwise
    """
    ...

async def check_if_auth_required(mcp_url: str, httpx_kwargs: dict[str, Any] | None = ...) -> bool:
    """
    Check if the MCP endpoint requires authentication by making a test request.

    Returns:
        True if auth appears to be required, False otherwise
    """
    ...

def OAuth(mcp_url: str, scopes: str | list[str] | None = ..., client_name: str = ..., token_storage_cache_dir: Path | None = ..., additional_client_metadata: dict[str, Any] | None = ...) -> OAuthClientProvider:
    """
    Create an OAuthClientProvider for an MCP server.

    This is intended to be provided to the `auth` parameter of an
    httpx.AsyncClient (or appropriate FastMCP client/transport instance)

    Args:
        mcp_url: Full URL to the MCP endpoint (e.g. "http://host/mcp/sse/")
        scopes: OAuth scopes to request. Can be a
        space-separated string or a list of strings.
        client_name: Name for this client during registration
        token_storage_cache_dir: Directory for FileTokenStorage
        additional_client_metadata: Extra fields for OAuthClientMetadata

    Returns:
        OAuthClientProvider
    """
    ...

