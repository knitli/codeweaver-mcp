"""
This type stub file was generated by pyright.
"""

from typing import Any, Generic, Literal, TypeVar
from openapi_pydantic import OpenAPI, Operation, Parameter, PathItem, Reference, RequestBody, Response, Schema
from openapi_pydantic.v3.v3_0 import OpenAPI as OpenAPI_30, Operation as Operation_30, Parameter as Parameter_30, PathItem as PathItem_30, Reference as Reference_30, RequestBody as RequestBody_30, Response as Response_30, Schema as Schema_30
from fastmcp.utilities.types import FastMCPBaseModel

logger = ...
HttpMethod = Literal['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD', 'TRACE']
ParameterLocation = Literal['path', 'query', 'header', 'cookie']
JsonSchema = dict[str, Any]
def format_array_parameter(values: list, parameter_name: str, is_query_parameter: bool = ...) -> str | list:
    """
    Format an array parameter according to OpenAPI specifications.

    Args:
        values: List of values to format
        parameter_name: Name of the parameter (for error messages)
        is_query_parameter: If True, can return list for explode=True behavior

    Returns:
        String (comma-separated) or list (for query params with explode=True)
    """
    ...

def format_deep_object_parameter(param_value: dict, parameter_name: str) -> dict[str, str]:
    """
    Format a dictionary parameter for deepObject style serialization.

    According to OpenAPI 3.0 spec, deepObject style with explode=true serializes
    object properties as separate query parameters with bracket notation.

    For example: {"id": "123", "type": "user"} becomes:
    param[id]=123&param[type]=user

    Args:
        param_value: Dictionary value to format
        parameter_name: Name of the parameter

    Returns:
        Dictionary with bracketed parameter names as keys
    """
    ...

class ParameterInfo(FastMCPBaseModel):
    """Represents a single parameter for an HTTP operation in our IR."""
    name: str
    location: ParameterLocation
    required: bool = ...
    schema_: JsonSchema = ...
    description: str | None = ...
    explode: bool | None = ...
    style: str | None = ...


class RequestBodyInfo(FastMCPBaseModel):
    """Represents the request body for an HTTP operation in our IR."""
    required: bool = ...
    content_schema: dict[str, JsonSchema] = ...
    description: str | None = ...


class ResponseInfo(FastMCPBaseModel):
    """Represents response information in our IR."""
    description: str | None = ...
    content_schema: dict[str, JsonSchema] = ...


class HTTPRoute(FastMCPBaseModel):
    """Intermediate Representation for a single OpenAPI operation."""
    path: str
    method: HttpMethod
    operation_id: str | None = ...
    summary: str | None = ...
    description: str | None = ...
    tags: list[str] = ...
    parameters: list[ParameterInfo] = ...
    request_body: RequestBodyInfo | None = ...
    responses: dict[str, ResponseInfo] = ...
    schema_definitions: dict[str, JsonSchema] = ...
    extensions: dict[str, Any] = ...


__all__ = ['HTTPRoute', 'ParameterInfo', 'RequestBodyInfo', 'ResponseInfo', 'HttpMethod', 'ParameterLocation', 'JsonSchema', 'parse_openapi_to_http_routes', 'extract_output_schema_from_responses', 'format_deep_object_parameter']
TOpenAPI = TypeVar('TOpenAPI', OpenAPI, OpenAPI_30)
TSchema = TypeVar('TSchema', Schema, Schema_30)
TReference = TypeVar('TReference', Reference, Reference_30)
TParameter = TypeVar('TParameter', Parameter, Parameter_30)
TRequestBody = TypeVar('TRequestBody', RequestBody, RequestBody_30)
TResponse = TypeVar('TResponse', Response, Response_30)
TOperation = TypeVar('TOperation', Operation, Operation_30)
TPathItem = TypeVar('TPathItem', PathItem, PathItem_30)
def parse_openapi_to_http_routes(openapi_dict: dict[str, Any]) -> list[HTTPRoute]:
    """
    Parses an OpenAPI schema dictionary into a list of HTTPRoute objects
    using the openapi-pydantic library.

    Supports both OpenAPI 3.0.x and 3.1.x versions.
    """
    ...

class OpenAPIParser(Generic[TOpenAPI, TReference, TSchema, TParameter, TRequestBody, TResponse, TOperation, TPathItem]):
    """Unified parser for OpenAPI schemas with generic type parameters to handle both 3.0 and 3.1."""
    def __init__(self, openapi: TOpenAPI, reference_cls: type[TReference], schema_cls: type[TSchema], parameter_cls: type[TParameter], request_body_cls: type[TRequestBody], response_cls: type[TResponse], operation_cls: type[TOperation], path_item_cls: type[TPathItem]) -> None:
        """Initialize the parser with the OpenAPI schema and type classes."""
        ...
    
    def parse(self) -> list[HTTPRoute]:
        """Parse the OpenAPI schema into HTTP routes."""
        ...
    


def clean_schema_for_display(schema: JsonSchema | None) -> JsonSchema | None:
    """
    Clean up a schema dictionary for display by removing internal/complex fields.
    """
    ...

def generate_example_from_schema(schema: JsonSchema | None) -> Any:
    """
    Generate a simple example value from a JSON schema dictionary.
    Very basic implementation focusing on types.
    """
    ...

def format_json_for_description(data: Any, indent: int = ...) -> str:
    """Formats Python data as a JSON string block for markdown."""
    ...

def format_description_with_responses(base_description: str, responses: dict[str, Any], parameters: list[ParameterInfo] | None = ..., request_body: RequestBodyInfo | None = ...) -> str:
    """
    Formats the base description string with response, parameter, and request body information.

    Args:
        base_description (str): The initial description to be formatted.
        responses (dict[str, Any]): A dictionary of response information, keyed by status code.
        parameters (list[ParameterInfo] | None, optional): A list of parameter information,
            including path and query parameters. Each parameter includes details such as name,
            location, whether it is required, and a description.
        request_body (RequestBodyInfo | None, optional): Information about the request body,
            including its description, whether it is required, and its content schema.

    Returns:
        str: The formatted description string with additional details about responses, parameters,
        and the request body.
    """
    ...

def extract_output_schema_from_responses(responses: dict[str, ResponseInfo], schema_definitions: dict[str, Any] | None = ...) -> dict[str, Any] | None:
    """
    Extract output schema from OpenAPI responses for use as MCP tool output schema.

    This function finds the first successful response (200, 201, 202, 204) with a
    JSON-compatible content type and extracts its schema. If the schema is not an
    object type, it wraps it to comply with MCP requirements.

    Args:
        responses: Dictionary of ResponseInfo objects keyed by status code
        schema_definitions: Optional schema definitions to include in the output schema

    Returns:
        dict: MCP-compliant output schema with potential wrapping, or None if no suitable schema found
    """
    ...

