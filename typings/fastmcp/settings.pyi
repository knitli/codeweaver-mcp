"""
This type stub file was generated by pyright.
"""

import inspect
from pathlib import Path
from typing import Annotated, Any, Literal
from pydantic import Field, field_validator
from pydantic.fields import FieldInfo
from pydantic_settings import BaseSettings, EnvSettingsSource, PydanticBaseSettingsSource, SettingsConfigDict
from typing_extensions import Self

logger = ...
LOG_LEVEL = Literal["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
DuplicateBehavior = Literal["warn", "error", "replace", "ignore"]
class ExtendedEnvSettingsSource(EnvSettingsSource):
    """
    A special EnvSettingsSource that allows for multiple env var prefixes to be used.

    Raises a deprecation warning if the old `FASTMCP_SERVER_` prefix is used.
    """
    def get_field_value(self, field: FieldInfo, field_name: str) -> tuple[Any, str, bool]:
        ...
    


class ExtendedSettingsConfigDict(SettingsConfigDict, total=False):
    env_prefixes: list[str] | None
    ...


class Settings(BaseSettings):
    """FastMCP settings."""
    model_config = ...
    @classmethod
    def settings_customise_sources(cls, settings_cls: type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -> tuple[PydanticBaseSettingsSource, ...]:
        ...
    
    @property
    def settings(self) -> Self:
        """
        This property is for backwards compatibility with FastMCP < 2.8.0,
        which accessed fastmcp.settings.settings
        """
        ...
    
    home: Path = ...
    test_mode: bool = ...
    log_level: LOG_LEVEL = ...
    @field_validator("log_level", mode="before")
    @classmethod
    def normalize_log_level(cls, v): # -> str:
        ...
    
    enable_rich_tracebacks: Annotated[bool, Field(description=inspect.cleandoc("""
                If True, will use rich tracebacks for logging.
                """)),] = ...
    deprecation_warnings: Annotated[bool, Field(description=inspect.cleandoc("""
                Whether to show deprecation warnings. You can completely reset
                Python's warning behavior by running `warnings.resetwarnings()`.
                Note this will NOT apply to deprecation warnings from the
                settings class itself.
                """)),] = ...
    client_raise_first_exceptiongroup_error: Annotated[bool, Field(default=True, description=inspect.cleandoc("""
                Many MCP components operate in anyio taskgroups, and raise
                ExceptionGroups instead of exceptions. If this setting is True, FastMCP Clients
                will `raise` the first error in any ExceptionGroup instead of raising
                the ExceptionGroup as a whole. This is useful for debugging, but may
                mask other errors.
                """)),] = ...
    resource_prefix_format: Annotated[Literal["protocol", "path"], Field(default="path", description=inspect.cleandoc("""
                When perfixing a resource URI, either use path formatting (resource://prefix/path)
                or protocol formatting (prefix+resource://path). Protocol formatting was the default in FastMCP < 2.4;
                path formatting is current default.
                """)),] = ...
    client_init_timeout: Annotated[float | None, Field(description="The timeout for the client's initialization handshake, in seconds. Set to None or 0 to disable."),] = ...
    host: str = ...
    port: int = ...
    sse_path: str = ...
    message_path: str = ...
    streamable_http_path: str = ...
    debug: bool = ...
    mask_error_details: Annotated[bool, Field(default=False, description=inspect.cleandoc("""
                If True, error details from user-supplied functions (tool, resource, prompt)
                will be masked before being sent to clients. Only error messages from explicitly
                raised ToolError, ResourceError, or PromptError will be included in responses.
                If False (default), all error details will be included in responses, but prefixed
                with appropriate context.
                """)),] = ...
    server_dependencies: Annotated[list[str], Field(default_factory=list, description="List of dependencies to install in the server environment"),] = ...
    json_response: bool = ...
    stateless_http: bool = ...
    default_auth_provider: Annotated[Literal["bearer_env"] | None, Field(description=inspect.cleandoc("""
                Configure the authentication provider. This setting is intended only to
                be used for remote confirugation of providers that fully support
                environment variable configuration.

                If None, no automatic configuration will take place.

                This setting is *always* overriden by any auth provider passed to the
                FastMCP constructor.
                """)),] = ...
    include_tags: Annotated[set[str] | None, Field(default=None, description=inspect.cleandoc("""
                If provided, only components that match these tags will be
                exposed to clients. A component is considered to match if ANY of
                its tags match ANY of the tags in the set.
                """)),] = ...
    exclude_tags: Annotated[set[str] | None, Field(default=None, description=inspect.cleandoc("""
                If provided, components that match these tags will be excluded
                from the server. A component is considered to match if ANY of
                its tags match ANY of the tags in the set.
                """)),] = ...


def __getattr__(name: str): # -> Settings:
    """
    Used to deprecate the module-level Image class; can be removed once it is no longer imported to root.
    """
    ...

